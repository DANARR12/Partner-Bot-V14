const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

let storageType = 'json'; 
if (!fs.existsSync(`data.json`)) {
            fs.writeFileSync(`data.json`, "{}");
}
const dataPath = path.resolve('data.json');
// All Copyrights By </SmSm>#8700
let data = {};
let dataChanged = false;

function readData() {
  try {
    data = JSON.parse(fs.readFileSync(dataPath).toString());
  } catch (error) {
    data = {};
  }
}
// All Copyrights By </SmSm>#8700
function writeData() {
  fs.writeFileSync(dataPath, JSON.stringify(data));
}


const dataSchema = new mongoose.Schema({
  key: String,
  value: mongoose.Mixed
});

const Data = mongoose.model('Data', dataSchema);


// All Copyrights By </SmSm>#8700
async function connect(uri) {
  await mongoose.connect(uri, { useNewUrlParser: true });
  console.log('Connected to MongoDB');
}

async function useJSON() {
  storageType = 'json';
}

async function useMongoDB() {
  storageType = 'mongoose';
}
async function add(key, value) {
  if (storageType === 'json') {
if (data[key]) {
    data[key] += value;
  } else {
    data[key] = value;
  }
  dataChanged = true;
  } else {
  const doc = await Data.findOne({ key }).exec();
  if (!doc) {
    await Data.create({ key, value });
  } else {
    doc.value += value;
    await doc.save();
  }
  return doc ? doc.value : value;
}
}
async function subtract(key, value) {
  if (storageType === 'json') {
if (data[key]) {
    data[key] -= value;
  } else {
    data[key] = -value;
  }
  dataChanged = true;
  } else {
  const doc = await Data.findOne({ key }).exec();
  if (!doc) {
    await Data.create({ key, value: -value });
  } else {
    doc.value -= value;
    await doc.save();
  }
  return doc ? doc.value : -value;
}
}
// All Copyrights By </SmSm>#8700
async function set(key, value) {
  if (storageType === 'json') {
data[key] = value;
  dataChanged = true;
  } else {
  const doc = await Data.findOneAndUpdate({ key }, { value }, { upsert: true, new: true }).exec();
  return doc.value;
}
}
// All Copyrights By </SmSm>#8700
async function get(key) {
  if (storageType === 'json') {
  return data[key];
  } else {
  const doc = await Data.findOne({ key }).exec();
  return doc ? doc.value : undefined;
}
}
// All Copyrights By </SmSm>#8700
async function trash(key) {
  
if (storageType === 'json') {
const value = data[key];
  delete data[key];
  dataChanged = true;
  return value;
} else {
  const doc = await Data.findOneAndDelete({ key }).exec();
  return doc ? doc.value : undefined;
}
}
// All Copyrights By </SmSm>#8700
async function has(key) {
  if (storageType === 'json') {
return data.hasOwnProperty(key);
  } else {
  const doc = await Data.findOne({ key }).exec();
  return !!doc;
}
}
// All Copyrights By </SmSm>#8700
async function all() {
  if (storageType === 'json') {
return Object.entries(data).map(([key, value]) => ({ key, value }));
  } else {
  const docs = await Data.find().exec();
  return docs.map(doc => ({ key: doc.key, value: doc.value }));
}
}
// All Copyrights By </SmSm>#8700
async function fetch(key) {
  if (storageType === 'json') {
return data[key];
  } else {
  const doc = await Data.findOne({ key }).exec();
  return doc ? doc.value : undefined;
}
}
// All Copyrights By </SmSm>#8700
async function reset() {
  if (storageType === 'json') {
    data = {};
  dataChanged = true;
  } else {
  await Data.deleteMany({});
}
}
// All Copyrights By </SmSm>#8700
function save() {
  if (dataChanged) {
    writeData();
    dataChanged = false;
  }
}

setInterval(save, 1000);

readData();

// All Copyrights By </SmSm>#8700
module.exports = {
  connect,
  useJSON,
  useMongoDB,
  add,
  subtract,
  set,
  get,
  trash,
  has,
  all,
  fetch,
  reset
};
